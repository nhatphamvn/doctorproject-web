import userRepository from "../repositories/userRepositories";
import bcrypt from "bcryptjs";

//GET

const hashPassword = (userPassword) => {
  if (!userPassword) {
    throw new Error("Password is required");
  }
  const salt = bcrypt.genSaltSync(10);
  return bcrypt.hashSync(userPassword, salt);
};

const ApiGetUserById = async (id) => {
  try {
    const userData = await userRepository.getUserById(id);
    if (!userData) {
      return {
        EM: "Kh√¥ng c√≥ ng∆∞·ªùi d√πng!",
        EC: 1,
        DT: null,
      };
    }
    return {
      EM: "T√¨m ki·∫øm ng∆∞·ªùi d√πng th√†nh c√¥ng!",
      EC: 0,
      DT: userData,
    };
  } catch (error) {
    return {
      EM: "L·ªói truy xu·∫•t ng∆∞·ªùi d√πng!",
      EC: 500,
      DT: null,
    };
  }
};

const ApiGetAllUsers = async () => {
  try {
    const users = await userRepository.getAllUsers();

    if (!users) {
      return {
        EM: "Kh√¥ng c√≥ ng∆∞·ªúi d√πng n√†o trong d·ªØ li·ªáu!",
        EC: 1,
        DT: null,
      };
    }
    const updatedUsers = users.map((user) => {
      if (user.image && Buffer.isBuffer(user.image)) {
        // Chuy·ªÉn ƒë·ªïi Buffer th√†nh base64
        user.image = user.image.toString("base64");
      }
      return user;
    });

    return {
      EM: "T√¨m ki·∫øm th√†nh c√¥ng!",
      EC: 0,
      DT: updatedUsers,
    };
  } catch (error) {
    return {
      EM: "L·ªói truy xu·∫•t d·ªØ li·ªáu!",
      EC: 500,
      DT: null,
    };
  }
};
//POST
const ApiCreateUser = async (
  username,
  email,
  address,
  phone,
  password,
  image,
  gender,
  roleId,
  positionId
) => {
  try {
    const hashedPassword = await hashPassword(password);

    const newUser = await userRepository.createUser({
      username,
      email,
      address,
      phone,
      password: hashedPassword,
      image,
      gender,
      roleId,
      positionId,
    });

    return {
      EM: "B·∫°n ƒë√£ t·∫°o th√†nh c√¥ng ng∆∞·ªùi d√πng!",
      EC: 0,
      DT: {
        id: newUser.id,
      },
    };
  } catch (error) {
    console.error(error);
    return {
      EM: "L·ªói t·∫°o ng∆∞·ªùi d√πng!",
      EC: 500,
      DT: null,
    };
  }
};

//PUT
const ApiUpdateUser = async (
  id,
  username,
  phone,
  address,
  image,
  gender,
  roleId,
  positionId
) => {
  try {
    if (!id) {
      return {
        EM: "ID kh√¥ng h·ª£p l·ªá",
        EC: 400,
        DT: null,
      };
    }

    // üöÄ Log d·ªØ li·ªáu tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    console.log("üìù Data before update:", {
      id,
      username,
      phone,
      address,
      image,
      gender,
      roleId,
      positionId,
    });

    const updateUser = await userRepository.updateUser(id, {
      username,
      phone,
      address,
      image,
      gender,
      roleId,
      positionId,
    });

    // üöÄ Log d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t
    console.log("‚úÖ Data after update in DB:", updateUser);

    if (!updateUser) {
      return {
        EM: "Ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y",
        EC: 1,
        DT: null,
      };
    }

    return {
      EM: "S·ª≠a ƒë·ªïi th√†nh c√¥ng ng∆∞·ªùi d√πng",
      EC: 0,
      DT: updateUser,
    };
  } catch (error) {
    console.error("‚ùå Error updating user:", error);
    return {
      EM: "L·ªói ch·ªânh s·ª≠a ng∆∞·ªùi d√πng",
      EC: 500,
      DT: null,
    };
  }
};

const ApiDelete = async (id) => {
  try {
    const deleted = await userRepository.deleteUser(id);
    if (!deleted) {
      return {
        EM: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!",
        EC: 1,
        DT: null,
      };
    }
    return {
      EM: "ƒê√£ xo√° th√†nh c√¥ng ng∆∞·ªùi d√πng",
      EC: 0,
      DT: deleted,
    };
  } catch (error) {
    return {
      EM: "L·ªói khi xo√° ng∆∞·ªùi d√πng!",
      EC: 500,
      DT: null,
    };
  }
  //DELETE
};

module.exports = {
  ApiUpdateUser,
  ApiDelete,
  ApiGetAllUsers,
  ApiGetUserById,
  ApiCreateUser,
};
